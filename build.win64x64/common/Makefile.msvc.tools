#############################################################################
# Common Makefile for Win32 VM using MSVC, e.g. 2017 Community, and gnu make
# Copyright (c) 2020 3D Immersive Collaboration Consulting, LLC
#
# Compilation rules for 64-bit MSVC 2017 compiler on Microsoft Windows
#############################################################################

# Overridable location of the Cygwin installation Cygwin Bin Directory
CBD=c:/cygwin64/bin
CBD64=c:/cygwin64/usr/x86_64-w64-mingw32/bin
CBD32=c:/cygwin64/usr/i686-w64-mingw32/bin

#############################################################################
# C compiler settings (MSVC 2017 Community Edition)
#

# WARNINGS:= -Wall -Wno-unused-variable -Wno-unknown-pragmas -Wno-unused-value -Wno-unused-function -Wno-unused-but-set-variable
# https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warnings-c4000-through-c4199?view=vs-2017
WARNINGS:= /W4 /wd4100 /wd4668 /wd4255 /wd4555 /wd4706

# VM config flags.
ifeq ($(CONFIGURATION),product)
# /Ob enable inline expansion /Oy omit frame pointer, Oi enable intrinsics
OFLAGS:=/Ox /Ob1 /Oi /Oy
NDEBUG:=/DNDEBUG /D'VM_LABEL(foo)=0' # Define NDEBUG for production to exclude asserts
DEBUGVM=0
else ifeq ($(CONFIGURATION),assert)
OFLAGS:=/Os /Oi- /Oy-
DEBUGVM=0
NDEBUG:=/D'VM_LABEL(foo)=0'
else
OFLAGS:=/Od
DEBUGVM=1
NDEBUG:=/D'VM_LABEL(foo)=0'
endif

ifeq ($(THREADING),multi)
COGDEFS:= $(COGDEFS) /DCOGMTVM=1 /DDEBUGVM=$(DEBUGVM)
else
COGDEFS:= $(COGDEFS) /DCOGMTVM=0 /DDEBUGVM=$(DEBUGVM)
endif

# MSVC's preprocessor (bless its heart) can't manage complex expansions
# and so unless we specify USE_INLINE_MEMORY_ACCESSORS lots of things
# break, including the checks in checkAssumedCompactClasses
MEMACCESS:=-DUSE_INLINE_MEMORY_ACCESSORS=1

# Set minimum version to Windows 8 (see /cygwin/usr/include/w32api/w32api.h)
#but if so, sqWin32AEC.cpp includes DeviceTopology.h & barfs
#WINVER:=/D_WIN32_WINNT=0x0801 /DWINVER=0x0801
# Set minimum version to Windows 10
WINVER:=/D_WIN64=1 /D_WIN32_WINNT=0x1001 /DWINVER=0x1001

# define _MT to eliminate the inline versions of printf et al in mingw/stdio.h
#NOBUILTIN:= -fno-builtin-printf -fno-builtin-putchar -fno-builtin-fprintf
NOBUILTIN:=/D_MT
MACHINE:=x64

TZ:=$(shell $(CBD)/date +%Z)
DEFS:=	$(COGDEFS) $(MEMACCESS) $(WINVER) /DWIN32=1 /DWIN32_FILE_SUPPORT /DNO_ISNAN \
		/DNO_SERVICE /D'TZ="$(TZ)"' \
		$(NDEBUG) -DLSB_FIRST -D'VM_NAME="$(VM_NAME)"' $(XDEFS) $(CROQUET)

#############################################################################
# Linker settings
#
LD:=	LINK /nologo /MACHINE:X64
LDCXX:=	LINK /nologo /MACHINE:X64
LIBRARIAN:=LIB /nologo
# dlltool is used to create import libraries.  The alternatives are
# Digital Mars' IMPLIB.EXE (32-bit only?) and mbarcadero's MKEXP.EXE (64-bit)
# N.B. cygiconv-2.dll cygintl-8.dll cygwin1.dll must be copied to $(CBD64)
# for this to work.
DLLTOOL:=$(CBD)/x86_64-w64-mingw32-dlltool

#EXPORT:=--export-all-symbols
#BASELDFLAGS:=-m32 -mthreads -Wl,--large-address-aware,--dynamicbase,--nxcompat,$(EXPORT)
BASELDFLAGS:= /DYNAMICBASE /LARGEADDRESSAWARE /NXCOMPAT /DEBUG:FULL
LDFLAGS:= /subsystem:windows $(BASELDFLAGS)
CONSOLELDFLAGS:= /subsystem:console $(BASELDFLAGS)
DL:=/DEFAULTLIB:
NDL:=/NODEFAULTLIB:

STDLIBS:=$(NDL)libc $(NDL)libcmt $(DL)msvcrt \
         $(DL)ddraw $(DL)dinput8 $(DL)opengl32 $(DL)ws2_32 $(DL)comdlg32 \
         $(DL)ole32 $(DL)winmm $(DL)version $(DL)wininet $(DL)user32 $(DL)gdi32\
         $(DL)psapi $(DL)advapi32 $(DL)kernel32 $(DL)dsound $(DL)secur32 \
		 $(DL)shell32 $(DL)shfolder

#############################################################################
# Tools to use
#
CP:= $(CBD)/cp
RM:= $(CBD)/rm
MV:= $(CBD)/mv
MKDIR:=$(CBD)/mkdir -p

#############################################################################
# RC settings
#
# Note: RC compiles the .rc files into linkable .o files
#
RC:=rc /nologo
CVTRES:=cvtres /nologo
SED:=$(CBD)/sed
GREP:=$(CBD)/grep
BASH:=$(CBD)/bash
SCCSVER:=$(PLATDIR)/Cross/vm/sqSCCSVersion.h

ifneq ($(shell $(GREP) 'GitRawRevisionString.*$$Rev$$.' $(SCCSVER)),)
$(shell $(BASH) -c "cd ../../scripts; ./updateSCCSVersions")
endif
SVNMAJOR := $(shell $(SED) -e "s/^static.*GitRawRevisionString.*Rev: \([0-9][0-9][0-9][0-9]\).*/\\1/p" -e d $(SCCSVER) | $(SED) -e 's/^0*//')
SVNMINOR := $(shell $(SED) -e "s/^static.*GitRawRevisionString.*Rev: [0-9][0-9][0-9][0-9]\([0-9][0-9]\).*/\\1/p" -e "s/^0*//" -e d $(SCCSVER) | $(SED) -e 's/^0*//')
SVNREV := $(shell $(SED) -e "s/^static.*GitRawRevisionString.*Rev: [0-9][0-9][0-9][0-9][0-9][0-9]\([0-9][0-9]\).*/\\1/p" -e "s/^0*//" -e d $(SCCSVER) | $(SED) -e 's/^0*//')
SVNBUILD := $(shell $(SED) -e "s/^static.*GitRawRevisionString.*Rev: [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\([0-9][0-9]*\).*/\\1/p" -e "s/^0*//" -e d $(SCCSVER) | $(SED) -e 's/^0*//')

RCFLAGS:= /i $(PLATDIR)/win32/misc -D_WIN32 -DFILEVERSIONVALUES=$(SVNMAJOR),$(SVNMINOR),$(SVNREV),$(SVNBUILD) -DFILEVERSIONSTRING="\"$(SVNMAJOR).$(SVNMINOR).$(SVNREV).$(SVNBUILD)\""
